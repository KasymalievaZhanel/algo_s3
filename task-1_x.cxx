/****************************************************************************
Задача 1_*.

Найти все простые числа в диапазоне \[2..n\] за O(n).

  in  | out
  ----|---------------
  15  | 2 3 5 7 11 13

****************************************************************************/
/*Идея:
  Задача состоит в том, чтобы найти все МИНИМАЛЬНЫЕ ПРОСТЫЕ ДЕЛИТЕЛИ compNum[i]
  для каждого i из [2..n].
  Храним все ПРОСТЫЕ ЧИСЛА в prNum.
  Изначачльно все compNum[i] = 0, в ходе работы массив будет наполняться.
  После перебора получим, что если compNum[i] = 0 => оно простое и compNum[i] = i,
  кидаем его в prNum,
  если compNum[i] != 0 => число i - составное с минимальным простым делителем compNum[i].
  Массив compNum[] будем заполнять так: ,берем кратные i и обновляем у них значения, т.е
  рассмотрим число как x(j) = i * p(j), где p(j) - все простые числа, тогда
  curNum[x(j)] = p(j). (похоже на факторизацию числа в обратном порядке)
  --------------------------------------------------------------------------------------
  Док-во:
  Линейное время работы будет, если установить, что все значения curNum[i]
  заполняем ровно один раз.
  Для каждого i мы перебираем все простые числа, которые мы уже нашли, и
  состоявляем из них новое число (составное - i = lp[i] * x).
  Получаем процесс факторизации числа в обратном порядке.
  Повторно любое составное число мы не сможем получить, т.к.
  представление числа i = lp[i] * x - единственно.
  Таким образом, мы получаем асимптотику O(n).
  
  
*/

#include <iostream>
#include <vector>

int main()
{
    int n;
    std::cin >> n;
    int *compNum = new int [n+1];
    // массив, в котором будем отслеживать составные числа
    // compNum[i] != 0  ==> оно составное
    std::vector<int> prNum;
    // запоминаем простые числа
    for ( int i = 0; i <= n+1; ++i )
      compNum[i] = 0;
    // изначальное предположение , что все числа простые

    for ( int i = 2; i <= n; ++i )
    {
      if ( compNum[i] == 0) 
      {
        compNum[i] = i;
        prNum.push_back(i);
      }
        // добавляем простые числа
      for ( int j = 0; j < prNum.size() && prNum[j] <= compNum[i] && i*prNum[j] <= n; ++j )
          compNum[ i * prNum[j] ] = prNum[j];
          // так мы забиваем все составные числа ненулевыми значениями
          // в весь массив compNum[]
    }

    for ( int i = 0; i < prNum.size(); ++i )
      std::cout << prNum[i] << " ";
    delete [] compNum;

    return 0;
}